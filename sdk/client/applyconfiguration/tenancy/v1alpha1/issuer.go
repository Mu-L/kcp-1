/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	tenancyv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/tenancy/v1alpha1"
)

// IssuerApplyConfiguration represents a declarative configuration of the Issuer type for use
// with apply.
type IssuerApplyConfiguration struct {
	URL                  *string                                  `json:"url,omitempty"`
	DiscoveryURL         *string                                  `json:"discoveryURL,omitempty"`
	CertificateAuthority *string                                  `json:"certificateAuthority,omitempty"`
	Audiences            []string                                 `json:"audiences,omitempty"`
	AudienceMatchPolicy  *tenancyv1alpha1.AudienceMatchPolicyType `json:"audienceMatchPolicy,omitempty"`
}

// IssuerApplyConfiguration constructs a declarative configuration of the Issuer type for use with
// apply.
func Issuer() *IssuerApplyConfiguration {
	return &IssuerApplyConfiguration{}
}

// WithURL sets the URL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the URL field is set to the value of the last call.
func (b *IssuerApplyConfiguration) WithURL(value string) *IssuerApplyConfiguration {
	b.URL = &value
	return b
}

// WithDiscoveryURL sets the DiscoveryURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DiscoveryURL field is set to the value of the last call.
func (b *IssuerApplyConfiguration) WithDiscoveryURL(value string) *IssuerApplyConfiguration {
	b.DiscoveryURL = &value
	return b
}

// WithCertificateAuthority sets the CertificateAuthority field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CertificateAuthority field is set to the value of the last call.
func (b *IssuerApplyConfiguration) WithCertificateAuthority(value string) *IssuerApplyConfiguration {
	b.CertificateAuthority = &value
	return b
}

// WithAudiences adds the given value to the Audiences field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Audiences field.
func (b *IssuerApplyConfiguration) WithAudiences(values ...string) *IssuerApplyConfiguration {
	for i := range values {
		b.Audiences = append(b.Audiences, values[i])
	}
	return b
}

// WithAudienceMatchPolicy sets the AudienceMatchPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AudienceMatchPolicy field is set to the value of the last call.
func (b *IssuerApplyConfiguration) WithAudienceMatchPolicy(value tenancyv1alpha1.AudienceMatchPolicyType) *IssuerApplyConfiguration {
	b.AudienceMatchPolicy = &value
	return b
}
