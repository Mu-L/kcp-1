/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// JWTAuthenticatorApplyConfiguration represents a declarative configuration of the JWTAuthenticator type for use
// with apply.
type JWTAuthenticatorApplyConfiguration struct {
	Issuer               *IssuerApplyConfiguration               `json:"issuer,omitempty"`
	ClaimValidationRules []ClaimValidationRuleApplyConfiguration `json:"claimValidationRules,omitempty"`
	ClaimMappings        *ClaimMappingsApplyConfiguration        `json:"claimMappings,omitempty"`
	UserValidationRules  []UserValidationRuleApplyConfiguration  `json:"userValidationRules,omitempty"`
}

// JWTAuthenticatorApplyConfiguration constructs a declarative configuration of the JWTAuthenticator type for use with
// apply.
func JWTAuthenticator() *JWTAuthenticatorApplyConfiguration {
	return &JWTAuthenticatorApplyConfiguration{}
}

// WithIssuer sets the Issuer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Issuer field is set to the value of the last call.
func (b *JWTAuthenticatorApplyConfiguration) WithIssuer(value *IssuerApplyConfiguration) *JWTAuthenticatorApplyConfiguration {
	b.Issuer = value
	return b
}

// WithClaimValidationRules adds the given value to the ClaimValidationRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClaimValidationRules field.
func (b *JWTAuthenticatorApplyConfiguration) WithClaimValidationRules(values ...*ClaimValidationRuleApplyConfiguration) *JWTAuthenticatorApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithClaimValidationRules")
		}
		b.ClaimValidationRules = append(b.ClaimValidationRules, *values[i])
	}
	return b
}

// WithClaimMappings sets the ClaimMappings field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClaimMappings field is set to the value of the last call.
func (b *JWTAuthenticatorApplyConfiguration) WithClaimMappings(value *ClaimMappingsApplyConfiguration) *JWTAuthenticatorApplyConfiguration {
	b.ClaimMappings = value
	return b
}

// WithUserValidationRules adds the given value to the UserValidationRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the UserValidationRules field.
func (b *JWTAuthenticatorApplyConfiguration) WithUserValidationRules(values ...*UserValidationRuleApplyConfiguration) *JWTAuthenticatorApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithUserValidationRules")
		}
		b.UserValidationRules = append(b.UserValidationRules, *values[i])
	}
	return b
}
